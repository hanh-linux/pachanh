#!/bin/bash

set -e
set -o errtrace

trap func_exit EXIT

# Exit function
func_exit() {
printf "\n"
}

## Function for cleaning line
clean_line(){
printf "\r                                                        "
}

## Function for printing help
help() {
echo ">> Printing help"
echo "tavinstall - Project Tavorites packages installer"
echo "Usage: tavinstall [options] [action] package"
echo "Action"
echo "--sync                                    Sync database from remote"
echo "--search                                  Search for packages"
echo "--install                                 Install packages <file>"
echo "--remove                                  Remove packages"
echo "Options"
echo "--help                                    Print this message"
echo "--config=<path to config>                 Use a alternative config"
echo "--sysroot=<path>                          Change root directory"
echo "--downloader=<command>                    Use another download command"
echo "--mirror-file=<path>                      Use specified mirror file"
echo "--disable-depends                         Disable dependencies check"
echo "--gen-skel=<path>                         Generate the packages build files"
echo "For any questions, please consider asking on GitHub: https://github.com/hanhlinux/pactav"
}

# Function for checking dependencies
depends_check(){
 if [ ! -z "$depends" ]; then
  for dep in $depends; do
   if [ ! -d $installed_infodir/$dep ]; then
   echo -ne "\n>>> $dep not found! Please compile and install it...\n"
   exit 1
   fi
  done
 fi
}

# Function for downloading database
sync_data(){
## Get some variables
all_server=$(cat $mirror_file)

## Create the database directory if it doesn't exist
[ ! -d "$dbdir" ] && mkdir -p $dbdir
cd $dbdir
## Clear old database
printf "\n>> (0%%)__ Cleaning old database..."
rm -rf *
## Download the database for the server
clean_line
printf "\r>> (20%%)_ Downloading database from server..."
for server in $all_server
do
 eval $downloader $server/package-data.tar.gz > /dev/null

### Check if the database archive is available
 if [ -f package-data.tar.gz ]; then
  clean_line
  printf "\r>> (80%%)_ Unpacking database..."
  tar -xf package-data.tar.gz
  printf "\r>> (100%%)"
  exit
 fi

done

}

# Function for generating build files
skel_gen(){
printf "\n>> (0%%)__ Generating build files..."
cd $dir_skel
tar -xf $dbdir/package-data.tar.gz
clean_line
printf "\r>> (50%%)_ Cleaning up..."
rm -rf repo-update.sh README.md example.md date 
printf "\r>> (100%%)"
}

# Function for installing package.
install_pkg() { 
for pkg in $package; do
### Check if the package exists
 [ ! -f "$pkg" ] && printf "\n>>> Package tarball not found!\n" && exit 1

### If the package is available, unpack the pre-install file for checking dependencies and filtering old files. 

 printf "\n>> (0%%)__ Unpacking package header..."
 TEMP=$(mktemp -d)
 tar -C $TEMP -xf $pkg pre-install
 source $TEMP/pre-install

### Disable dependencies check if the --disable-depends option is enabled

 if [ "$check_deps" == 1 ]; then
  clean_line
  printf "\r>> (5%%)__ Checking dependencies..."
  depends_check
 fi

### Get package info directory
 clean_line
 printf "\r>> (10%%)_ Getting infomation directory..." 
 tar -C $TEMP -xf $pkg $infodir

### Filter the old files
 oldfile=$sysroot/$pkg_infodir/filelist
 newfile=$TEMP/$pkg_infodir/filelist 

 if [ -f "$oldfile" ]; then
  clean_line
  printf "\r>> (20%%)_ Filtering old files..."
  difffiles=$(diff $oldfile $newfile | grep "<" | sed 's/<//g')
  
  for files in $(echo $difffiles); do 
   rm -rvf $files
  done

 fi

### Unpack the package to $sysroot
 clean_line
 printf "\r>> (30%%)_ Installing $name..."
 tar -C $sysroot -xf $pkg
 rm -rf $sysroot/pre-install $TEMP
 printf "\r>> (100%%)"

done
}

remove_pkg() {
for pkg_dir in $package; do

## Get some variables
 installed_pkg_infodir=$installed_infodir/$pkg_dir
 installed_pkg_filelist=$installed_infodir/$pkg_dir/filelist

### Check if the package is installed on the system
printf "\n>> (0%%)__ Checking if the packages is installed..."
 if [ ! -f "$installed_pkg_filelist" ]; then 
   echo -ne "\n>>> Filelist not found! Exiting...\n"
   exit 1
 fi

### Remove files (folders will be ignored because it may delete the necessary folders)
 clean_line
 printf "\r>> (10%%)_ Removing $pkg_dir..."
 cd $sysroot
 rm -f $(cat $installed_pkg_filelist) > /dev/null 2>&1 || true
 rm -rf $installed_pkg_infodir
 printf "\r>> (100%%)"

done
}

printf "<< Executing command... \n"
# Get some variables
check_deps=1

# Get the executed command. If the command comes with no more option, print the help.
command="$*"
[ -z "$command" ] && help && exit

# Parse the command line.
for x in $command; do

case $x in
"--help") help; exit;;
"--config"=*) 		config=$(echo "$x" | cut -d "=" -f 2);;
"--sysroot"=*) 		override_sysroot=$(echo "$x" | cut -d "=" -f 2);;
"--downloader"=*) 	override_downloader=$(echo "$x" | cut -d "=" -f 2);;
"--mirror-file"=*)      mirror_file=$(echo "$x" | cut -d "=" -f 2);;
"--disable-depends")    check_deps=0;;
"--gen-skel"=*)         gen_skel=1;dir_skel=$(echo "$x" | cut -d "=" -f 2);;
"--sync")		sync=1;;
"--search")		search=1;;
"--install")		install=1;;
"--remove")		remove=1;;
"--"*)			echo ">>> Unknown options: $x. Ignoring...";;
*)			package="$package $x";;	
esac

done

# Check for some variables

[ ! -z "$config" ] && [ ! -f "$config" ] && echo ">>> Configuration file not found! Exiting..." && exit 1
[ -z "$config" ] && config="CONFDIR/etc/tav.conf"
source $config

[ ! -z "$override_downloader" ] && downloader="$override_downloader"
[ -z "$downloader" ] && echo ">>> Download command not found! Exiting..." && exit 127

[ ! -z "$mirror_file" ] && [ ! -f "$mirror_file" ] && echo ">>> Mirror file not found! Exiting..." && exit 1
[ -z "$mirror_file" ] && mirror_file="CONFDIR/etc/tavmirror"

if [ ! -z "$override_sysroot" ]; then
 [ ! -d "$override_sysroot" ] && echo ">>> $override_sysroot not found! Exiting..." && exit 1
 sysroot=$override_sysroot
fi	
[ -z "$sysroot" ] && sysroot="SYSROOT/"

installed_infodir="$sysroot/var/lib/pactav/system/"
[ ! -d "$installed_infodir" ] && echo ">>> System packages information directory not found! Exiting..." && exit 1

dbdir="$sysroot/var/lib/pactav/remote"
[ ! -d "$dbdir" ] && echo ">>> Database directory not found! Exiting..." && exit 1


[ "$install" == 1 ] && [ "$remove" == 1 ] && echo ">>> --install option cannot be used with --remove option. Exiting..." && exit

[ "$gen_skel" == 1 ] && [ ! -z "$dir_skel" ] && [ ! -d "$dir_skel" ] && echo ">>> Skeleton directory not found! Exiting..." && exit 1

# Execute the functions above
[ "$sync" == 1 ] && sync_data

[ "$gen_skel" == 1 ] && skel_gen 

[ "$install" == 1 ] && install_pkg

[ "$remove" == 1 ] && remove_pkg

printf "\n>> Process executed successfully. \n"
