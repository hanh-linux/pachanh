#!/bin/bash

set -e
set -o errtrace

trap func_exit EXIT

# Exit function
func_exit() {
printf "<< Exiting...\n"
}

# Function for cleaning line
clean_line(){
printf "\r                                                        "
}

info() {
clean_line && printf "\r>> $1"
}

err() {
printf "\n>>> $1\n" && exit 1
}

# Function for printing help
help() {
echo ">> Printing help"
echo "hanhinstall - Hanh Linux packages installer"
echo "Usage: tavinstall [options] [action] package"
echo "Action"
echo "--sync                                    Sync database from remote"
echo "--search                                  Search for packages"
echo "--install                                 Install packages <file>"
echo "--remove                                  Remove packages"
echo "--gen-skel=<path>                         Generate the packages build files"
echo "--build=<directory>                       Build all available build files inside a directory"
echo "Options"
echo "--help                                    Print this message"
echo "--version                                 Print version"
echo "--config=<path to config>                 Use a alternative config"
echo "--sysroot=<path>                          Change root directory"
echo "--downloader=<command>                    Use another download command"
echo "--mirror-file=<path>                      Use specified mirror file"
echo "--disable-depends                         Disable dependencies check"
echo "For any questions, please consider asking on GitHub: https://github.com/hanh-linux/pachanh"
}

# Function for checking dependencies
depends_check(){
 if [ ! -z "$depends" ]; then
  for dep in $depends; do
   if [ ! -d $installed_infodir/$dep ]; then
   err "$dep not found! Please compile and install it..."
   exit 1
   fi
  done
 fi
}

# Function for checking libraries
lib_check(){
 if [ ! -z "$lib" ]; then
  for need_lib in $lib; do
   for search_dir in $HANH_LIBDIR; do
    [ -f "$search_dir/$need_lib" ] && found_lib=1
   done
   [ -z "$found_lib" ] && err "Library $need_lib not found!"
  done
 fi

}

# Function for checking conflicts
conflicts_func() {
if [ ! -z "$contain" ]; then
 for conflict in $contain; do
  if [ -d "$installed_infodir/$conflict" ]; then

#### Check if the conflict is a link to another folder
   link=$(readlink $installed_infodir/$conflict)
   if [ -z "$link" ]; then
##### Check if it is directory
    printf "\n>>> $conflict conflicts with $name. Do you want to remove it? (Y/n)"
    read confirm
##### The lines below will be formatted like this due to compability
case $confirm in 
Y|y) hanhinstall --remove $conflict;;
*) exit 1;
esac
##### End of directory check

    else

##### Check if it is symlink
##### If the symlink is not linked to the pending package, continue the process
     if [ "$link" != "$name" ]; then
      printf "\n>>> $link conflicts with $name. Do you want to remove it? (Y/n)"
      read confirm
###### The lines below will be like this due to compatibility
case $confirm in 
Y|y) hanhinstall --remove $link;;
*) exit 1;
esac
     fi
##### End of symlink check

   fi
  fi
 done
fi
}

# Function for downloading database
sync_data(){
## Get some variables
all_repo=$(ls -d $mirror_dir/*)

## Create the database directory if it doesn't exist
[ ! -d "$dbdir" ] && mkdir -p $dbdir
cd $dbdir
## Clear old database
printf "\n"
info "(0%%)__ Cleaning old database..."
rm -rf *
## Download the database for the server

info "(20%%)_ Working with database..."
for repo_name in $all_repo; do
 repo=$(basename $repo_name)
 for server in $(cat $repo_name); do

### Download the database
  eval $downloader $server/$repo.tar.gz
### Check if the database archive is available
  if [ -f $repo.tar.gz ]; then
   tar -xf $repo.tar.gz
   break
  fi

 done
done

info "(100%%)"
}

# Function for copying build files
skel_gen(){
printf "\n"
info "(0%%)__ Copying build files..."
cd $dir_skel
if [ -z "$package" ]; then
 cp -r $dbdir/* .
 rm -rf *.tar.gz
else
 for pkg_build_dir in $package; do
  [ ! -d "$dbdir/$pkg_build_dir" ] && err "Package $pkg_build_dir not found! Exiting..."
  cp -r $dbdir/$pkg_build_dir .
  source $dbdir/$pkg_build_dir/buildhanh 
  for dep in $depends; do 
   [ ! -d $dbdir/$dep ] && err "Depend $dep not found! Exiting..."
   [ -d $dbdir/$dep ] && hanhinstall --gen-skel=. $dep 
  done
 done
fi
info "(100%%)"
}

# Function for installing package.
install_pkg() { 
for pkg in $package; do
### Check if the package exists
 [ ! -f "$pkg" ] && err "Package tarball not found!"

### If the package is available, unpack the pre-install file for checking dependencies and filtering old files. 

 printf "\n"
 info "(0%%)__ Unpacking package header..."
 TEMP=$(mktemp -d)
 tar -C $TEMP -xf $pkg pre-install
 source $TEMP/pre-install

### Disable dependencies check if the --disable-depends option is enabled

 if [ "$check_deps" == 1 ]; then
  info "(5%%)__ Checking dependencies..."
  depends_check
  lib_check
 fi

### Check the conflicts package
 info "(10%%)_ Checking conflicts..."
 conflicts_func

### Get package info directory
 info "(15%%)_ Getting infomation directory..." 
 tar -C $TEMP -xf $pkg $pkg_infodir

### Filter the old files
 oldfile=$sysroot/$pkg_infodir/filelist
 newfile=$TEMP/$pkg_infodir/filelist 

 if [ -f "$oldfile" ]; then
  info "(20%%)_ Filtering old files..."
  difffiles=$(diff $oldfile $newfile | grep "<" | sed 's/< //g')
  for files in $difffiles; do 
   rm -rvf $sysroot/$files
  done
 fi

### Unpack the package to $sysroot
 info "(30%%)_ Installing $name..."
 tar -C $sysroot -xf $pkg
 rm -rf $sysroot/pre-install $TEMP
 info "(100%%)"

done
}

remove_pkg() {
for pkg_dir in $package; do

## Get some variables
 installed_pkg_filelist=$installed_infodir/$pkg_dir/filelist
 installed_pkg_header=$installed_infodir/$pkg_dir/header

### Check if the package is installed on the system
 info "(0%%)__ Checking if the packages is installed..."
 [ ! -d "$installed_infodir/$pkg_dir" ] && err "Package $pkg_dir not found! Exiting..."
 source $installed_pkg_header

### Remove files (folders will be ignored because it may delete the necessary folders)
 info "(10%%)_ Removing $pkg_dir..."
 cd $sysroot
 rm -f $(cat $installed_pkg_filelist) > /dev/null 2>&1 || true

### Remove package folder and packages it contains 
 for remove_conflict in $contain; do
 rm -rf $installed_infodir/$remove_conflict
 done 
 rm -rf $installed_infodir/$name 
 info "(100%%)"

done
}

build_all() {
printf "\n" 
info "(0%%)__ Preparing..."
cd $build_dir
parent_dir=$(pwd)
info "(5%%)__ Building packages..."
for build_pkg in *; do
 [ -d "$parent_dir"/"$build_pkg" ] && cd $parent_dir/$build_pkg && hanhbuild --disable-depends
done
info "(80%%)_ Moving packages to all_packages directory..."
cd $parent_dir
mkdir -p all_packages
mv */*.hanhbuild.tar.gz all_packages/
info "(100%%)"
}

printf "<< Executing command... \n"
# Get some variables
check_deps=1
version="1.0"

# Get the executed command. If the command comes with no more option, print the help.
command="$*"
[ -z "$command" ] && help && exit

# Parse the command line.
for x in $command; do

case $x in
"--help") help; exit;;
"--config"=*) 		config=$(echo "$x" | cut -d "=" -f 2);;
"--sysroot"=*) 		override_sysroot=$(echo "$x" | cut -d "=" -f 2);;
"--downloader"=*) 	override_downloader=$(echo "$x" | cut -d "=" -f 2);;
"--mirror-dir"=*)       mirror_dir=$(echo "$x" | cut -d "=" -f 2);;
"--disable-depends")    check_deps=0;;
"--gen-skel"=*)         gen_skel=1;dir_skel=$(echo "$x" | cut -d "=" -f 2);;
"--sync")		sync=1;;
"--build="*)            all_build=1;build_dir=$(echo $x | cut -d "=" -f 2);;
"--search")		search=1;;
"--install")		install=1;;
"--remove")		remove=1;;
"--version")            echo "$version";exit;;
"--"*)			echo ">>> Unknown options: $x. Ignoring...";;
*)			package="$package $x";;	
esac

done

# Check for some variables

[ ! -z "$config" ] && [ ! -f "$config" ] && err "Configuration file not found! Exiting..."
[ -z "$config" ] && config="CONFDIR/etc/hanh.conf"
source $config

[ ! -z "$override_downloader" ] && downloader="$override_downloader"
[ -z "$downloader" ] && err "Download command not found! Exiting..." && exit 127

[ ! -z "$mirror_dir" ] && [ ! -d "$mirror_dir" ] && err "Mirror directory not found! Exiting..."
[ -z "$mirror_dir" ] && mirror_dir="CONFDIR/etc/hanhmirror.d"

if [ ! -z "$override_sysroot" ]; then
 [ ! -d "$override_sysroot" ] && err "$override_sysroot not found! Exiting..."
 sysroot=$override_sysroot
fi	
[ -z "$sysroot" ] && sysroot="SYSROOT/"

[ -z "$HANH_LIBDIR" ] && HANH_LIBDIR="/lib /lib64 /usr/lib /usr/lib64"

installed_infodir="$sysroot/var/lib/pachanh/system/"
[ ! -d "$installed_infodir" ] && err "System packages information directory not found! Exiting..."

dbdir="$sysroot/var/lib/pachanh/remote"
[ ! -d "$dbdir" ] && err "Database directory not found! Exiting..."

[ "$install" == 1 ] && [ "$remove" == 1 ] && err "--install option cannot be used with --remove option. Exiting..."

if [ "$gen_skel" == 1 ]; then
[ ! -z "$dir_skel" ] && [ ! -d "$dir_skel" ] && err "Skeleton directory not found! Exiting..."
[ -z "$dir_skel" ] && dir_skel=.
fi

if [ "$all_build" == 1 ]; then
[ ! -z "$build_dir" ] && [ ! -d "$build_dir" ] && err "Build directory not found! Exiting..."
[ -z "$build_dir" ] && err "Enter a build directory, please! Exiting..."
fi

# Execute the functions above
[ "$sync" == 1 ] && sync_data

[ "$gen_skel" == 1 ] && skel_gen 

[ "$install" == 1 ] && install_pkg

[ "$remove" == 1 ] && remove_pkg

[ "$all_build" == 1 ] && build_all
