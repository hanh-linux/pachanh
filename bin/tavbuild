#!/bin/bash

set -e

# Help function
help() {
echo "tavbuild - Project Tavorites packages builder"
echo "Usage: tavbuild [options]"
echo "Options"
echo "--help					Print this message"
echo "--config=<path to config>			Use a alternative config"
echo "--buildfile=<path to buildfile>		Use a alternative build file"
echo "--downloader=<command>			Use command to install"
echo "--clean					Clean all current work and package directory"
echo "--no-unpack				Use current work directory"
echo "--repack					Make a package using current work directory"
echo "For any questions, please consider asking on GitHub: https://github.com/hanhlinux/pactav"
exit
}

# Function for package archive
archive_pkg(){

## Get some useful variables
 pkg_tarball="$name"-"$ver".tavbuild.tar.gz
 infodir="$pkgdir/var/lib/pactav/system"
 info_pkgdir="$info_dir/$name"
 info_file=$info_pkgdir/info
 info_filelist=$info_pkgdir/filelist
 header=$pkgdir/pre-install

## Generate package infomation
 echo "Generating information..."

 mkdir -p $info_pkgdir
 echo "Name: $name" >> $info_file
 echo "Version: $ver" >> $info_file
 echo "Description: $desc" >> $info_file
 echo "Depends: " $depends >> $info_file
 echo "Homepage: $home" >> $info_file

## Generate the filelist before generating the header. The header will not be included to the filelist and will be removed after the package is installed.
 echo "Generating filelist..."

 cd $pkgdir
 find * | tee $info_filelist

## Generate the header 
 echo "name=$name" >> $header
 echo "version=$ver" >> $header
 echo "desc=$desc" >> $header
 echo depends=\"$depend\" >> $header
 echo "pkg_infodir=/var/lib/pactav/system/$name" >> $header 

## Compress the package 
 echo "Compressing package..."
 tar -cJvf $tavdir/$pkg_tarball *

 echo "Create package:" $pkg_tarball 
}

# Export some necessary variables
no_unpack=0
repack=0

# Get the command line 
command="$*"

# Parse the command line
for x in $command; do

case $x in
"--help") help; exit;;
"--config"=*) config=$(echo "$x" | cut -d "=" -f 2);;
"--buildfile"=*) buildfile=$(echo "$x" | cut -d "=" -f 2);;
"--downloader"=*) override_downloader=$(echo "$x" | cut -d "=" -f 2);;
"--clean") clean=1;;
"--no-unpack") no_unpack=1;;
"--repack")  repack=1;;
"--"*) echo "Invalid option";exit;;
*) 
esac

done

# Source the configuration file
[ ! -z "$config" ] && [ ! -f "$config" ] && echo "Configuration file not found!" && exit
[ -z "$config" ] && config=$sysroot/etc/tavbuild.conf
source $config

# Check if the download command is available.
[ ! -z "$override_downloader" ] && downloader="$override_downloader"
[ -z "$downloader" ] && echo "Download command not found" && exit

# Check if the build file exists then source the build file
[ -z $buildfile ] && buildfile=buildtav

if [ ! -f $buildfile ]; then
 echo "Build file not found!"
 exit
fi

source $buildfile

# Check for available functions
grep_unpack=$(cat $buildfile | grep unpack-pkg | cut -d "(" -f 1)
grep_compile=$(cat $buildfile | grep compile-pkg | cut -d "(" -f 1)
grep_pkg=$(cat $buildfile | grep make-pkg | cut -d "(" -f 1)

# Execute the functions above with options
if [ "$clean" == 1 ]; then
no_unpack=0
rm -rf $pkgdir $workdir
fi

mkdir -p $pkgdir $workdir

if [ ! -z "$source" ]; then
 for need_file in $source; do
  eval $downloader $need_file
 done
fi


if [ -z "$grep_unpack" ]; then
 no_unpack=1
fi 


if [ -z "$grep_compile" ]; then
 repack=1
fi

if [ "$no_unpack" == 0 ]; then
 unpack-pkg
fi

if [ "$repack" == 0 ]; then
 compile-pkg
fi

for repack_command in $(echo $pkg_command); do
 rm -rf $pkgdir && mkdir -p $pkgdir
 eval $repack_command
 archive_pkg
done
